-------- 8/26/24 ------------------------------------------------------------------------
LYAH notes Ch1-2:

Statically typed - knows what code is a number or a string, catches errors in compiling 
Type inference - you don't have to label every variable as a string or an int

:1 FILE_NAME.hs - load functions

:r - reload functions

When subtracting always add () to negative numbers (-3)

&& - and
|| - or
not - negates a True or False

Testing for equality:
==  is equal - works on any two things that can be compared
/=  is NOT equal

How to call a function: 
FUNCTION_NAME PARAMETERS
i.e. succ 8 , succeed 8 is 9
 	  9 
     min 10 11 | max 100 101
	 10    |     101
     92 `div` 10
         9


Function list:
succ - show succeeding number
max, min - show which number is highest or lowest
div - does integral division between two functions
if/then/else - *Else is mandatory
mod - x mod 7 is x/7

Functions succeed all else so put parentheses around math to have it calculated first

" ' " - denotes a strict version of a function or a modified function/variable

Functions cannot begin with an uppercase letter

A function that does not take any parameters it is called a definition (or a name)


Lists: 
[x, y, z, a, b] - [] denote a list
Lists are homogenous, no mixing strings and ints
['cow', 'duck'...]

++ - puts two lists together numbers and individual strings NEED []
	"hello" ++ " " ++ "world" -> "hello world"
: - cons operator, instantly puts lists together numbers and individual strings DONT NEED []
	'A' : " small cat" -> "A small cat"
[] - empty list
[[]] - list containing an empty list
[[],[],[]] - list containing 3 empty lists *ALL LISTS INSIDE OF LISTS M UST BE OF SAME TYPE*

To get an item out of a list use '!!' i.e. [9.4,33.2,96.2,11.2,23.25] !! 1 -> 33.2

'head' - returns the head of the list
'tail' - returns everything in the list besides its head
'last' - returns the last element in the list
'init' - returns everything besides the last value
<, >, <=, >= compare lists starting with the first value in the list
'length' - returns the length of the list
'null' - checks if the list is empty returning [True], or if it contains something [False]
'reverse' - reverses the order of a list
	i.e. [1,2,3,4,5] -> [5,4,3,2,1]
'take x' - extracts (NOT REMOVES) x amount of elements from the beginning of the list
	i.e. take 3 [5,4,3,2,1] -> [5,4,3]
'drop x' - is the inverse of 'take', drops the specified elements returning only those not droped
	i.e. drop 3 [1,2,3,4,5,6] -> [4,5,6]
'minimum' & 'maximum' - takes a list of elements that can be ordered and returns the biggest/smallest element
'sum' - takes a list of numbers and returns their sum
'product' - takes a list of numbers and returns their product
'x elem' - tells us if x is in the function
	i.e. 4 'elem' [3,4,5,6] -> [True]


Ranges:
[1..20] - To make a list for all numbers 1-20
['a'..'z'] - To make a list for all letters between A and Z
[2,4..20] -> [2,4,6,8,10...20]
[3,6..20] -> [3,6,9,12,15,18]

To do descending numbers do [20,19..1] -> [20,19,18,17...1]
Don't use FLOATs in ranges

> take 24 [13,26..] gives the first 24 multiples of 13, its technically an infinite list but since 
			Haskell is lazy it waits to see what you want to get out of that list
'cycle' > take 10 (cycle [1,2,3]) -> [1,2,3,1,2,3,1,2,3,1] - takes a list and cycles it into an infinite list
'repeat' > take 10 (repeat 5) -> [5,5,5,5,5,5,5,5,5,5] - takes an element and produces an infinite list of said element
'replicate' > replicate 3 10 -> [10,10,10] - same as the prior function (repeat)


List comprehensions:
<- declares the variable ( , between variables)
| separates the result
, separates the variables and the conditions
> [x*2 | x <- [1..10]] -> [2,4,6,8,10,12,14,16,18,20]
> [x*2 | x <- [1..10], x*2 >= 12] -> [12,14,16,18,20] - x*2 is the output function, x is the variable, x <= 10 is the predicate
Using predicates to sift through lists is called filtering

> boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]   
> boomBangs [7..13] -> ["BOOM!","BOOM!","BANG!","BANG!"]

> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19] -> [10,11,12,14,16,17,18,20]

A list drawn by a comprehension that draws from two lists of length 4 will have length 16
i.e. > [ x*y | x <- [2,5,10], y <- [8,10,11]] -> [16,20,22,40,50,55,80,100,110]

Making a custom length function:
> length' xs = sum [1 | _ <- xs] - '_' is used since we do not care what the value in the list is, just that there IS a value
The function replaces each element with 1 then sums it up, the result is the length of the list


Tuples:
Used when you know how many values you want to combine
pair - 2 components
triple - 3 components
4-tuple - 4 components
A tuple can contain several types i.e. both int and str but can only be compaired to other 
				       lists/tuples that have same length and type per vairable
> fst (8,11)	'fst' - takes a pair and returns first component
> 8

> snd (8,11)	'snd' - takes a pair and returns second component
> 11

> zip [1,2,3,4,5] [5,5,5,5,5]		'zip' - combines the 1 element of two lists into a pair, then the 2 element...
> [(1,5),(2,5),(3,5),(4,5),(5,5)]
